# Description: Converts all images in the public folder to webp format and updates the markdown files accordingly
# Generated by AI (Chat-GPT 4), USE ON YOUR OWN RISK

import os
import re
import cv2
import time
import numpy as np
from pathlib import Path
from markdown_it import MarkdownIt
from mdformat.renderer import MDRenderer

def resize_image(image, max_width, max_height):
    height, width = image.shape[:2]

    # Calculate the aspect ratio
    aspect_ratio = float(width) / float(height)

    # Calculate new dimensions based on aspect ratio
    if width > max_width or height > max_height:
        if aspect_ratio > 1:
            new_width = max_width
            new_height = int(new_width / aspect_ratio)
        else:
            new_height = max_height
            new_width = int(new_height * aspect_ratio)
    else:
        new_width, new_height = width, height

    # Resize the image
    resized_image = cv2.resize(image, (new_width, new_height), interpolation=cv2.INTER_AREA)
    return resized_image

def convert_image_to_webp(image_path, max_width, max_height):
    # Read the image
    with open(image_path, "rb") as f:
        buf = np.frombuffer(f.read(), dtype=np.uint8)
    image = cv2.imdecode(buf, cv2.IMREAD_UNCHANGED)

    # Resize the image
    resized_image = resize_image(image, max_width, max_height)

    # Convert the image to webp format
    webp_image_path = image_path.with_suffix(".webp")
    _, encoded_image = cv2.imencode(".webp", resized_image, [cv2.IMWRITE_WEBP_QUALITY, 100])  # Adjust the quality parameter (0-100)

    with open(webp_image_path, "wb") as f:
        f.write(encoded_image.tobytes())

    return webp_image_path


def update_markdown_file(md_path, old_image_name, new_image_name):
    with open(md_path, "r", encoding="utf-8", errors="ignore") as f:
        content = f.read()

    content = content.replace(old_image_name, new_image_name)

    with open(md_path, "w", encoding="utf-8", errors="ignore") as f:
        f.write(content)

def main():
    print("Processing")
    content_dir = Path("_content")
    public_dir = Path("public")

    for study_program in ["bwu", "bmed", "bixd"]:
        content_study_program_dir = content_dir / study_program
        public_study_program_dir = public_dir / study_program

        for root, _, files in os.walk(content_study_program_dir):
            for file in files:
                if file.endswith(".md"):
                    print(f"Processing {file}")
                    md_path = Path(root) / file
                    with open(md_path, "r", encoding="utf-8") as f:
                        content = f.read()
                    
                    # Find all image names in the front matter
                    front_matter = re.search(r'^---\n(.*?)\n---\n', content, re.MULTILINE | re.DOTALL)
                    if front_matter:
                        image_names = re.findall(r'(?:profile_picture|image):\s*"(.*?)"', front_matter.group(1))
                        
                        for old_image_name in image_names:
                            print(f"Old image name: {old_image_name}")
                            old_image_path = public_study_program_dir.joinpath(Path(root).name, old_image_name)
        
                            # Check if the file exists
                            if old_image_path.exists():
                                max_width = 600 if "profile" in old_image_name else 854
                                max_height = 750 if "profile" in old_image_name else 480
                                new_image_path = convert_image_to_webp(old_image_path, max_width, max_height)
                                new_image_name = str(new_image_path.relative_to(public_study_program_dir.joinpath(Path(root).name)))
                                print(f"New image name: {new_image_name}")
                                update_markdown_file(md_path, old_image_name, new_image_name)
                                time.sleep(1)
                                os.remove(old_image_path)
                            else:
                                print(f"File {old_image_path} not found")

if __name__ == "__main__":
    main()
